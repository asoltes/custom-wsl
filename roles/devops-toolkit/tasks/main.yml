---
  - name: Update and upgrade packages
    apt:
      update_cache: yes
      upgrade: dist

  - name: Install useful utilities
    apt:
      name:
        - iptables
        - lsof
        - socat
        - rsync
        - gnupg
        - wslu
        - ntpdate
        - show-motd
        - command-not-found
      state: present

  - name: Install essential development packages
    apt:
      name:
        - apt-utils
        - sudo
        - debianutils
        - build-essential
        - pkg-config
        - man-db
        - bash-completion
      state: present

  - name: Install locales and generate en_US.UTF-8 locale
    apt:
      name: locales
      state: present
    notify:
      - Generate locale

  - name: Install useful commands
    apt:
      name:
        - vim
        - nano
        - curl
        - wget
        - gzip
        - unzip
        - tcpdump
        - jq
        - git
        - nmap
        - dnsutils
        - iputils-ping
        - traceroute
        - mtr
        - whois
        - postgresql-client
        - redis-tools
        - bat
        - telnet
        - netcat-openbsd
        - unzip
        - software-properties-common
        - python3
        - python3-pip
        - python-is-python3
        - pipx
        - ripgrep
        - ansible
      state: present

  - name: Set the default timezone to Asia/Manila
    apt:
      name: tzdata
      state: present

  - name: Configure timezone and unminimize distribution
    shell: |
      ln -fs /usr/share/zoneinfo/Asia/Manila /etc/localtime
      dpkg-reconfigure --frontend noninteractive tzdata
    when: ansible_facts['distribution_version'] == "24.04"

  # - name: Check if Homebrew is installed
  #   stat:
  #     path: /home/linuxbrew/.linuxbrew/bin/brew
  #   register: homebrew_check

  # - name: Install Homebrew
  #   become: no
  #   shell: |
  #     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #   when: not homebrew_check.stat.exists
  #   ignore_errors: yes

  - name: Install Zsh
    apt:
      name: zsh
      state: present

  - name: Set Zsh as the default shell
    user:
      name: "{{ ansible_user }}"
      shell: /bin/zsh

  - name: Check if Oh My Zsh is installed
    stat:
      path: "/home/{{ ansible_user }}/.oh-my-zsh"
    register: oh_my_zsh_check

  - name: Install Oh My Zsh
    become: no
    shell: |
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    when: not oh_my_zsh_check.stat.exists

  - name: Install powerlevel10k theme
    git:
      repo: 'https://github.com/romkatv/powerlevel10k.git'
      dest: "/home/{{ ansible_user }}/.oh-my-zsh/custom/themes/powerlevel10k"
      clone: yes
      depth: 1

  - name: Install Bash-my-aws
    git:
      repo: 'https://github.com/bash-my-aws/bash-my-aws.git'
      dest: "/home/{{ ansible_user }}/.bash-my-aws"
      clone: yes
      depth: 1

  - name: Install Zsh plugins
    git:
      repo: "{{ item.repo }}"
      dest: "/home/{{ ansible_user }}/.oh-my-zsh/custom/plugins/{{ item.name }}"
      clone: yes
    loop:
      - { repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git', name: 'zsh-syntax-highlighting' }
      - { repo: 'https://github.com/zsh-users/zsh-autosuggestions', name: 'zsh-autosuggestions' }
      - { repo: 'https://github.com/asdf-vm/asdf.git', name: 'asdf' }

  - name: Check if AWS CLI is installed
    command: which aws
    register: aws_cli_check
    ignore_errors: true

  - name: Download AWS CLI v2
    ansible.builtin.get_url:
      url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
      dest: "/tmp/awscliv2.zip"

  # - name: Unzip AWS CLI v2 installer
  #   ansible.builtin.unarchive:
  #     src: "/tmp/awscliv2.zip"
  #     dest: "/tmp/"
  #     remote_src: yes

  # - name: Install AWS CLI v2
  #   ansible.builtin.command:
  #     cmd: "sudo ./aws/install --update"
  #     chdir: "/tmp"

  # - name: Verify AWS CLI installation
  #   ansible.builtin.command:
  #     cmd: "aws --version"
  #   register: aws_version_output

  # - debug:
  #     msg: "AWS CLI installed: {{ aws_version_output.stdout }}"

  - name: Install Pre-commit hooks
    shell: |
      pip install pre-commit --break-system-packages

  - name: Check if terraform-docs is installed
    command: which terraform-docs
    register: terraform_docs_check
    ignore_errors: true

  - name: Download and install terraform-docs
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | grep -o -E -m 1 "https://.+?-linux-amd64.tar.gz")" > terraform-docs.tgz
      tar -xzf terraform-docs.tgz terraform-docs
      rm terraform-docs.tgz
      chmod +x terraform-docs
      sudo mv terraform-docs /usr/bin/
    when: terraform_docs_check.rc != 0

  - name: Check if terrascan is installed
    command: which terrascan
    register: terrascan_check
    ignore_errors: true

  - name: Download and install terrascan
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E -m 1 "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
      tar -xzf terrascan.tar.gz terrascan
      rm terrascan.tar.gz
      sudo mv terrascan /usr/bin/
      terrascan init
    when: terrascan_check.rc != 0

  - name: Check if tflint is installed
    command: which tflint
    register: tflint_check
    ignore_errors: true

  - name: Download and install tflint
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.zip")" > tflint.zip
      unzip tflint.zip
      rm tflint.zip
      sudo mv tflint /usr/bin/
    when: tflint_check.rc != 0

  - name: Check if tfsec is installed
    command: which tfsec
    register: tfsec_check
    ignore_errors: true

  - name: Download and install tfsec
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest | grep -o -E -m 1 "https://.+?tfsec-linux-amd64")" > tfsec
      chmod +x tfsec
      sudo mv tfsec /usr/bin/
    when: tfsec_check.rc != 0

  - name: Check if trivy is installed
    command: which trivy
    register: trivy_check
    ignore_errors: true

  - name: Download and install trivy
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep -o -E -i -m 1 "https://.+?/trivy_.+?_Linux-64bit.tar.gz")" > trivy.tar.gz
      tar -xzf trivy.tar.gz trivy
      rm trivy.tar.gz
      sudo mv trivy /usr/bin
    when: trivy_check.rc != 0

  - name: Check if tfupdate is installed
    command: which tfupdate
    register: tfupdate_check
    ignore_errors: true

  - name: Download and install tfupdate
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/minamijoyo/tfupdate/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.tar.gz")" > tfupdate.tar.gz
      tar -xzf tfupdate.tar.gz tfupdate
      rm tfupdate.tar.gz
      sudo mv tfupdate /usr/bin/
    when: tfupdate_check.rc != 0

  - name: Check if hcledit is installed
    command: which hcledit
    register: hcledit_check
    ignore_errors: true

  - name: Download and install hcledit
    shell: |
      curl -L "$(curl -s https://api.github.com/repos/minamijoyo/hcledit/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.tar.gz")" > hcledit.tar.gz
      tar -xzf hcledit.tar.gz hcledit
      rm hcledit.tar.gz
      sudo mv hcledit /usr/bin/
    when: hcledit_check.rc != 0

  - name: Check if Granted is installed
    command: granted
    register: granted_check
    ignore_errors: true

  - name: Install Granted
    shell: |
      curl -o /tmp/granted_0.36.2_linux_x86_64.tar.gz -OL releases.commonfate.io/granted/v0.36.2/granted_0.36.2_linux_x86_64.tar.gz
      tar -zxvf /tmp/granted_0.36.2_linux_x86_64.tar.gz -C /usr/local/bin/
      rm -f /tmp/granted_0.36.2_linux_x86_64.tar.gz
    when: granted_check.rc != 0

  - name: Install WSL utilities
    apt:
      name: wslu
      state: present

  - name: Copy update-motd.d files
    copy:
      src: ../../docker/etc/update-motd.d/
      dest: /etc/update-motd.d/
      mode: '0755'

  - name: Copy hosts file
    copy:
      src: ../../docker/etc/hosts
      dest: /etc/hosts
      mode: '0755'

  - name: Copy register.sh script
    copy:
      src: ../../docker/files/register.sh
      dest: /opt/register.sh
      mode: '0755'

  - name: Copy .zshrc for default user
    copy:
      src: ../../docker/files/.zshrc
      dest: "/home/{{ ansible_user }}/.zshrc"
      mode: '0755'
  
  - name: Check if asdf is installed
    stat:
      path: "{{ ansible_env.HOME }}/.asdf"
    register: asdf_check

  - name: Install asdf tool version manager
    git:
      repo: 'https://github.com/asdf-vm/asdf.git'
      remote: v0.15.0
      dest: "/home/{{ ansible_user }}/.asdf"
      clone: yes
      depth: 1
    when: not asdf_check.stat.exists

  - name: Add WSL Configuration
    copy:
      src:  templates/p10k.zsh.j2
      dest: "/home/{{ ansible_user }}/.p10k.zsh"
      mode: '0755'

  - name: Source the zshrc script
    shell: |
      source /home/{{ ansible_user }}/.zshrc
    args: 
      executable: /bin/zsh
    register: sourced
      # executable: /bin/bash
    ignore_errors: yes

  - name: Show sourced output
    debug:
      msg: '{{sourced}}'

  - name: Add WSL Configuration
    become: yes
    template:
      src:  wsl.conf.j2
      dest: "/etc/wsl.conf"
      mode: '0755'

  - name: Install asdf plugin in asdf
    shell: |
      /bin/zsh -c asdf plugin-add terraform latest
      /bin/zsh && asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
      /bin/zsh && asdf plugin-add chezmoi https://github.com/joke/asdf-chezmoi.git
    ignore_errors: yes

  - name: Install tools using asdf for Zsh
    shell: |
      /bin/zsh && asdf install terraform latest &&  asdf global terraform latest
      /bin/zsh && asdf install nodejs 18.16.0 &&  asdf global nodejs 18.16.0
      /bin/zsh && asdf install chezmoi 2.57.0 &&  asdf global chezmoi 2.57.0
    ignore_errors: yes

  - name: Congratulations! you are almost done, :p
    vars:
      msg: |
          < Congrats, {{ ansible_user }}! you can now create a new terminal session! and rerun the playbook just to make sure :p lol!>
            -----------------------
              \
                \
                    .--.
                  |o_o |
                  |:_/ |
                  //   \ \
                (|     | )
                /'\_   _/`\
                \___)=(___/
    debug:
      msg: "{{ msg.split('\n') }}"
